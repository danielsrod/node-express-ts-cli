let chalk,fs,ncp,path,promisify,execa,Listr,projectInstall;_f00‍.x([["createProject",()=>createProject]]);_f00‍.w("chalk",[["default",["chalk"],function(v){chalk=v}]]);_f00‍.w("fs",[["default",["fs"],function(v){fs=v}]]);_f00‍.w("ncp",[["default",["ncp"],function(v){ncp=v}]]);_f00‍.w("path",[["default",["path"],function(v){path=v}]]);_f00‍.w("util",[["promisify",["promisify"],function(v){promisify=v}]]);_f00‍.w("execa",[["default",["execa"],function(v){execa=v}]]);_f00‍.w("listr",[["default",["Listr"],function(v){Listr=v}]]);_f00‍.w("pkg-install",[["projectInstall",["projectInstall"],function(v){projectInstall=v}]]);









const access = promisify(fs.access);
const copy = promisify(ncp);

const copyTemplateFiles = async (options) => {
    return copy(options.templateDirectory, options.targetDirectory, {
        clobber: false
    });
}

const initGit = async (options) => {
    const reuslt = await execa('git', ['init'], {
        cwd: options.targetDirectory
    })
    if(reuslt.failed) {
        return Promise.reject(new Error('Failed to initialize Git'))
    }
    return
}

       const createProject = async (options) => {
    options = {
        ...options,
        targetDirectory: options.targetDirectory || process.cwd(),
    }

    const currentFileUrl = _f00‍._.meta.url;
    const templateDir = path.resolve(
        new URL(currentFileUrl).pathname,
        '../../templates',
        options.template.toLowerCase()
    );

    options.templateDirectory = templateDir;

    try {
        await access(templateDir, fs.constants.R_OK);
    } catch (err) {
        _f00‍.g.console.error('%s Invalid template name', chalk.red.bold('ERROR'));
        process.exit(1);
    }

    // console.log('Copy project files');
    // await copyTemplateFiles(options);

    const tasks = new Listr([
        {
            title: 'Copy project files',
            task: () => copyTemplateFiles(options)
        },
        {
            title: 'Initialize git',
            task: () => initGit(options),
            enabled: () => options.git
        },
        {
            title: 'Install dependencies',
            task: () => projectInstall({
                cwd: options.targetDirectory
            }),
            skip: () => !options.runInstall ? 'Pass --install to automatically install the dependencies' : undefined
        }
    ])

    await tasks.run() 

    _f00‍.g.console.log('%s Project ready', chalk.green.bold('DONE'));
    return true;
}